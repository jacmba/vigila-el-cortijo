name: Actions

on:
  pull_request: {}
  push: { tags: [v*] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  release:
    name: Build release ${{ github.ref }}
    runs-on: ubuntu-18.04
    outputs:
      url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      # Create release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.targetPlatform }} with Unity ${{ matrix.unityVersion }}
    runs-on: ubuntu-18.04
    needs: release
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2019.4.14f1
        targetPlatform:
          - StandaloneLinux64
          - StandaloneWindows64
          - StandaloneOSX
    steps:
      # Checkout
      - uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library

      # Tests
      - name: Run tests
        uses: game-ci/unity-test-runner@v1.3
        with:
          unityVersion: ${{ matrix.unityVersion }}
          testMode: all

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v0.10
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}

      # Upload artifact to release
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.url }}
          asset_path: build/${{ matrix.targetPlatform }}
          asset_name: VigilaElCortijo-${{ github.ref }}-${{ matrix.targetPlatform }}
          asset_content_type: application/zip
